import os
import requests
from notion_client import Client

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
NOTION_TOKEN = os.getenv("NOTION_TOKEN")
NOTION_DB_ID = os.getenv("NOTION_DB_ID")
STARGAZE_ADDRESS = os.getenv("STARGAZE_ADDRESS")

notion = Client(auth=NOTION_TOKEN)

COINGECKO_IDS = {
    "stars": "stargaze",
    "atom": "cosmos",
    "osmo": "osmosis",
    "tia": "celestia",
    "usdc": "usd-coin",
    "btc": "bitcoin",
}

def get_nfts():
    # MOCK: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π NFT
    return [{
        "token_id": "123",
        "token_uri": "https://ipfs.io/ipfs/Qm.../metadata.json"
    }]


def get_prices():
    ids = ",".join(COINGECKO_IDS.values())
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={ids}&vs_currencies=usd"
    print(f"üîó –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ CoinGecko: {url}")
    try:
        r = requests.get(url)
        r.raise_for_status()
        data = r.json()
        prices = {sym.upper(): data.get(api_id, {}).get("usd", 0) for sym, api_id in COINGECKO_IDS.items()}
        print(f"üí± –ö—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã: {prices}")
        return prices
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        return {}

def upsert_nfts(nfts, prices):
    for nft in nfts:
        token_id = nft.get("token_id")
        token_uri = nft.get("token_uri")
        print(f"üßô‚Äç‚ôÇÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NFT {token_id}")

        if not token_uri:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω NFT –±–µ–∑ token_uri")
            continue

        try:
            meta = requests.get(token_uri).json()
            name = meta.get("name", "NFT") + f" #{token_id}"
            image = meta.get("image", "")

            # MOCK: —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            currency = "STARS"
            amount = 100.0
            sender = "unknown"
            price_usd = amount * prices.get(currency, 0)

            response = notion.pages.create(
                parent={"database_id": NOTION_DB_ID},
                properties={
                    "Name": {"title": [{"text": {"content": name}}]},
                    "Currency": {"select": {"name": currency}},
                    "Price (token)": {"number": amount},
                    "Price (USD)": {"number": price_usd},
                    "Sender": {"rich_text": [{"text": {"content": sender}}]}
                },
                cover={"external": {"url": image}}
            )
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Notion: {name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è NFT {token_id} –≤ Notion: {e}")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Stargaze ‚Üí Notion")

    if not NOTION_TOKEN or not NOTION_DB_ID or not STARGAZE_ADDRESS:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å NOTION_TOKEN, NOTION_DB_ID, STARGAZE_ADDRESS")
        return

    nfts = get_nfts()
    prices = get_prices()

    if nfts and prices:
        upsert_nfts(nfts, prices)
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

    print("üåü –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()

